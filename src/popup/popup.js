// Modern Popup Script for ITMO Discipline Evaluator
// Uses BackgroundApi for all operations instead of direct API calls

import { BackgroundApi, ItmoApi, EvaluationApi } from "../services/index.js";
import { MESSAGE_TYPES } from "../types/index.js";

// Helper function to get ITMO token from settings
async function getItmoTokenFromSettings() {
  try {
    const response = await chrome.runtime.sendMessage({
      type: "GET_SETTINGS",
    });
    // Response comes wrapped in { success: true, data: {...} }
    const settings = response?.data || response;
    return settings?.itmoToken || "";
  } catch (e) {
    console.error("Could not get ITMO token from settings:", e);
    return "";
  }
}

const DEFAULT_THRESHOLDS = {
  semantic_coherence: 0.5,
  structural_balance: 0.4,
  topic_flow: 0.3,
  sequence_coverage: 0.6,
  graph_coverage: 0.6,
  redundancy: 0.4,
  relevance: 0.5,
  extra_topics_penalty: 0.4,
  final_score: 0.6,
};

function getMetricClass(key, value) {
  const threshold = DEFAULT_THRESHOLDS[key] ?? 0.5;

  if (key === "redundancy" || key === "extra_topics_penalty") {
    if (value <= threshold / 2) return "metric-good";
    if (value <= threshold) return "metric-warning";
    return "metric-bad";
  } else {
    if (value >= threshold + 0.1) return "metric-good";
    if (value >= threshold) return "metric-warning";
    return "metric-bad";
  }
}

function getISUFromCookie(rawToken) {
  if (!rawToken) return null;
  // Use background script's token validation
  return BackgroundApi.validateToken(rawToken)
    .then((result) => result.isu)
    .catch(() => null);
}

function getDisciplineIdFromUrl(tabUrl) {
  const match = tabUrl.match(/\/programs\/(\d+)/);
  return match ? match[1] : null;
}

function isItmoProgramsPage(tabUrl) {
  return /my\.itmo\.(ru|su)/.test(tabUrl) && /programs\/\d+/.test(tabUrl);
}

function isItmoChaptersPage(tabUrl) {
  return isItmoProgramsPage(tabUrl) && tabUrl.includes("p=chapters");
}

function getCurrentTab() {
  return new Promise((resolve) => {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      resolve(tabs[0] || null);
    });
  });
}

// Modern course structure fetching using BackgroundApi
async function getCourseStructureFromId(disciplineId, token) {
  try {
    const tab = await getCurrentTab();
    const domain = tab?.url || "";

    const result = await BackgroundApi.fetchCourseStructure(
      disciplineId,
      token,
      domain
    );
    return result;
  } catch (error) {
    console.error("‚ùå Failed to fetch course structure:", error);
    throw error;
  }
}

// Modern evaluation using BackgroundApi
async function evaluateDiscipline(courseText, referenceText = null) {
  try {
    const result = await BackgroundApi.evaluateDiscipline(
      courseText,
      referenceText
    );
    return result;
  } catch (error) {
    console.error("‚ùå Failed to evaluate discipline:", error);
    throw error;
  }
}

// Modern analytics tracking using BackgroundApi
async function trackEvaluation(data) {
  try {
    await BackgroundApi.trackEvaluation(data);
  } catch (error) {
    console.warn("‚ö†Ô∏è Failed to track analytics:", error);
    // Don't throw - analytics failures shouldn't break the app
  }
}

// Initialize popup when DOM is loaded
document.addEventListener("DOMContentLoaded", async () => {
  const evaluateBtn = document.getElementById("evaluateBtn");
  const createBtn = document.getElementById("createBtn");
  const output = document.getElementById("output");
  const referenceIdInput = document.getElementById("referenceIdInput");
  const resultContainer = document.getElementById("resultContainer");
  const metricsTable = document.getElementById("metricsTable");
  const adviceList = document.getElementById("adviceList");
  const findSimilarBtn = document.getElementById("findSimilarBtn");
  const similarOutput = document.getElementById("similarOutput");
  const generateStructureBtn = document.getElementById("generateStructureBtn");
  const settingsBtn = document.getElementById("settingsBtn");
  const debugBtn = document.getElementById("debugBtn");

  // ITMO —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

  // Load settings and configure UI
  try {
    const response = await chrome.runtime.sendMessage({
      type: "GET_SETTINGS",
    });

    // Response comes wrapped in { success: true, data: {...} }
    const settings = response?.data || response;

    // Hide debug button if not in developer mode
    if (!settings?.developerMode) {
      debugBtn.classList.add("hidden");
    }

    console.log("üîß Popup settings loaded:", settings);
  } catch (e) {
    console.warn("Could not load settings:", e);
    // Hide debug button by default if can't load settings
    debugBtn.classList.add("hidden");
  }

  // Find similar programs button
  findSimilarBtn.addEventListener("click", async () => {
    try {
      const tab = await getCurrentTab();
      const url = tab?.url || "";
      const id = getDisciplineIdFromUrl(url);
      const token = await getItmoTokenFromSettings();

      if (!isItmoProgramsPage(url)) {
        alert("–ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã");
        return;
      }

      if (!token) {
        alert("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω");
        return;
      }

      findSimilarBtn.disabled = true;
      similarOutput.textContent = "‚è≥ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º...";

      const result = await BackgroundApi.findApprovedPrograms(id, token, url);

      if (!result.programs || result.programs.length === 0) {
        similarOutput.textContent = "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
      } else {
        similarOutput.textContent = result.programs
          .map((p) => `${p.name} (ID: ${p.id})`)
          .join("\n");
      }
    } catch (error) {
      console.error("‚ùå Find similar error:", error);
      alert("‚ùå –û—à–∏–±–∫–∞: " + error.message);
      similarOutput.textContent = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.";
    } finally {
      findSimilarBtn.disabled = false;
    }
  });

  // Validation function
  async function validateInputs(tabUrl, resetResults = false) {
    const token = await getItmoTokenFromSettings();
    const onItmoPage = isItmoProgramsPage(tabUrl);
    const onChaptersPage = isItmoChaptersPage(tabUrl);

    const userIdEl = document.getElementById("userIdValue");

    try {
      if (token) {
        const validation = await BackgroundApi.validateToken(token);
        userIdEl.textContent = validation.isu || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
      } else {
        userIdEl.textContent = "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω";
      }
    } catch (e) {
      userIdEl.textContent = "–æ—à–∏–±–∫–∞";
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", e);
    }

    const errors = [];
    if (!onItmoPage) {
      errors.push(`–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –°–µ–π—á–∞—Å: ${tabUrl}`);
    }
    if (!token) {
      errors.push("ITMO —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.");
    }

    evaluateBtn.disabled = errors.length > 0;
    createBtn.disabled = !onChaptersPage || errors.length > 0;
    output.textContent = errors.length > 0 ? errors.join("\n") : "";

    if (resetResults) {
      resultContainer.classList.add("hidden");
      metricsTable.innerHTML = "";
      adviceList.innerHTML = "";
      output.classList.remove("hidden");
    }
  }

  // Initial validation
  try {
    const tab = await getCurrentTab();
    await validateInputs(tab?.url || "");
  } catch (error) {
    console.error("‚ùå Initial validation error:", error);
  }

  // ITMO —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ popup

  // Create chapter button
  createBtn.addEventListener("click", async () => {
    try {
      const tab = await getCurrentTab();
      const url = tab?.url || "";
      const id = getDisciplineIdFromUrl(url);
      const token = await getItmoTokenFromSettings();

      if (!isItmoChaptersPage(url)) {
        alert("–ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (p=chapters)");
        return;
      }

      createBtn.disabled = true;

      const defaultChapter = {
        order: 1,
        name: "–ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª",
        themes: [{ name: "–ü–µ—Ä–≤–∞—è —Ç–µ–º–∞", order: 1, resources: [] }],
        program_work_types: [],
      };

      await BackgroundApi.createChapter(id, token, url, defaultChapter);
      alert("‚úÖ –†–∞–∑–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
    } catch (error) {
      console.error("‚ùå Create chapter error:", error);
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª: " + error.message);
    } finally {
      createBtn.disabled = false;
    }
  });

  // Evaluate button
  evaluateBtn.addEventListener("click", async () => {
    try {
      const tab = await getCurrentTab();
      const tabUrl = tab?.url || "";
      const id = getDisciplineIdFromUrl(tabUrl);
      const token = await getItmoTokenFromSettings();
      const referenceId = referenceIdInput.value.trim();

      await validateInputs(tabUrl, true);

      if (!token || !isItmoProgramsPage(tabUrl)) {
        return;
      }

      // Store token for next time
      await BackgroundApi.storeToken(token);

      evaluateBtn.disabled = true;
      output.textContent = "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã...";

      // Get course structure
      const courseText = await getCourseStructureFromId(id, token);

      let referenceText = null;
      if (referenceId) {
        output.textContent = `‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω (${referenceId})...`;
        try {
          referenceText = await getCourseStructureFromId(referenceId, token);
        } catch (error) {
          console.warn(
            "‚ö†Ô∏è Failed to load reference, continuing without it:",
            error
          );
        }
      }

      output.textContent = "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ü–µ–Ω–∫—É...";

      // Evaluate discipline
      const evaluation = await evaluateDiscipline(courseText, referenceText);
      const result = evaluation.result;

      // Hide output and show results
      output.textContent = "";
      output.classList.add("hidden");

      // Track analytics
      await trackEvaluation({
        token,
        disciplineId: id,
        referenceId: referenceId || null,
        metrics: result,
      });

      // Determine which metrics to show
      const referenceProvided = referenceText && referenceText.length > 0;
      const metrics = referenceProvided
        ? [
            "final_score",
            "structural_score",
            "semantic_coherence",
            "topic_flow",
            "structural_balance",
            "sequence_coverage",
            "graph_coverage",
            "redundancy",
            "relevance",
            "extra_topics_penalty",
            "coverage_score",
            "relevance_score",
          ]
        : [
            "final_score",
            "structural_score",
            "semantic_coherence",
            "structural_balance",
            "redundancy",
          ];

      // Separate metrics into score metrics and detail metrics
      const scoreMetrics = [];
      const otherMetrics = [];

      if (metrics.includes("final_score")) {
        scoreMetrics.push("final_score");
      }

      for (const key of metrics) {
        if (key === "final_score") continue;
        if (key.endsWith("_score")) {
          scoreMetrics.push(key);
        } else {
          otherMetrics.push(key);
        }
      }

      // Render metrics table
      function renderMetricRow(key, value) {
        const cssClass = getMetricClass(key, value);
        return `<tr>
          <td style="padding: 4px;">${key}</td>
          <td style="padding: 4px; text-align: center;" class="${cssClass}">${value.toFixed(
          3
        )}</td>
        </tr>`;
      }

      const scoreRows = scoreMetrics
        .map((key) =>
          result[key] != null ? renderMetricRow(key, result[key]) : ""
        )
        .join("");

      const dividerRow = `<tr><td colspan="2"><hr style="border: none; border-top: 1px solid #ccc; margin: 6px 0;" /></td></tr>`;

      const otherRows = otherMetrics
        .map((key) =>
          result[key] != null ? renderMetricRow(key, result[key]) : ""
        )
        .join("");

      metricsTable.innerHTML =
        scoreRows + (otherRows ? dividerRow + otherRows : "");

      adviceList.innerHTML = result.advice.map((a) => `<li>${a}</li>`).join("");

      resultContainer.classList.remove("hidden");
    } catch (error) {
      console.error("‚ùå Evaluation error:", error);
      alert("‚ùå " + error.message);
      output.textContent = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–º. –¥–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.";
      output.classList.remove("hidden");
    } finally {
      evaluateBtn.disabled = false;
    }
  });

  // Generate structure button
  generateStructureBtn.addEventListener("click", async () => {
    try {
      const tab = await getCurrentTab();
      const tabUrl = tab?.url || "";
      const token = await getItmoTokenFromSettings();

      if (!token || !isItmoProgramsPage(tabUrl)) {
        alert(
          "–¢—Ä–µ–±—É–µ—Ç—Å—è ITMO —Ç–æ–∫–µ–Ω (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏) –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"
        );
        return;
      }

      // Get OpenAI key from settings
      let openaiKey = "";
      try {
        const response = await chrome.runtime.sendMessage({
          type: "GET_SETTINGS",
        });
        console.log("üîë Generation - response:", response);
        // Response comes wrapped in { success: true, data: {...} }
        const settings = response?.data || response;
        console.log("üîë Generation - settings:", settings);
        openaiKey = settings?.openaiApiKey || "";
        console.log(
          "üîë Generation - extracted key:",
          openaiKey ? "Found" : "Empty"
        );
      } catch (e) {
        console.error("Could not get settings:", e);
      }

      // If no key in settings, show error and redirect to settings
      if (!openaiKey) {
        alert(
          "üîë OpenAI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n" +
            "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenAI API –∫–ª—é—á.\n\n" +
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' –≤–Ω–∏–∑—É popup'–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á."
        );
        return;
      }

      generateStructureBtn.disabled = true;
      output.textContent = "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...";

      const disciplineId = getDisciplineIdFromUrl(tabUrl);

      // Generate structure using background API
      console.log(
        "üöÄ Popup: Starting structure generation for discipline:",
        disciplineId
      );
      const generationResult = await BackgroundApi.generateStructure(
        disciplineId,
        token,
        tabUrl,
        openaiKey
      );
      console.log("‚úÖ Popup: Generation result:", generationResult);

      const { structure, chapters, summary } = generationResult;

      // Show confirmation dialog with summary
      const confirmMessage = `–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: ${summary.title}
–£—Ä–æ–≤–µ–Ω—å: ${summary.level}

üóÇ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç–∏:
${summary.apiSummary}

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤?`;

      const proceed = confirm(confirmMessage);

      if (!proceed) {
        output.textContent = "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º";
        return;
      }

      output.textContent = "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ...";

      // Create chapters in ITMO system
      const creationResults = await BackgroundApi.createChaptersFromStructure(
        disciplineId,
        token,
        tabUrl,
        chapters,
        summary.workTypes
      );

      // Show detailed results with balancing info
      const balancingStatus = summary.balancingSuccess
        ? "‚úÖ –¢—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞!"
        : "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç–∏";

      let balancingDetails = "";
      if (summary.balancingDetails) {
        const details = summary.balancingDetails;
        balancingDetails = `\n\nüìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç–∏:\n`;
        balancingDetails += `–õ–µ–∫—Ü–∏–∏: ${details.actual["–õ–µ–∫—Ü–∏—è"] || 0}/${
          details.target.lectures
        } —Ç–µ–º ‚Üí ${(details.actual["–õ–µ–∫—Ü–∏—è"] || 0) * 2}/${
          details.target.lectureHours
        } —á–∞—Å–æ–≤ ${details.lecturesMatch ? "‚úÖ" : "‚ùå"}\n`;
        balancingDetails += `–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ: ${
          details.actual["–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞"] || 0
        }/${details.target.labs} —Ç–µ–º ‚Üí ${
          (details.actual["–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞"] || 0) * 2
        }/${details.target.labHours} —á–∞—Å–æ–≤ ${
          details.labsMatch ? "‚úÖ" : "‚ùå"
        }\n`;
        if (details.target.practices > 0) {
          balancingDetails += `–ü—Ä–∞–∫—Ç–∏–∫–∏: ${details.actual["–ü—Ä–∞–∫—Ç–∏–∫–∞"] || 0}/${
            details.target.practices
          } —Ç–µ–º ‚Üí ${(details.actual["–ü—Ä–∞–∫—Ç–∏–∫–∞"] || 0) * 2}/${
            details.target.practiceHours
          } —á–∞—Å–æ–≤ ${details.practicesMatch ? "‚úÖ" : "‚ùå"}\n`;
        }
      }

      output.textContent = `‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ${balancingStatus}`;

      alert(
        `${balancingStatus}\n\n` +
          `üìö –°–æ–∑–¥–∞–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${creationResults.length}\n` +
          `${balancingDetails}\n\n` +
          `üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n\n${structure}`
      );
    } catch (error) {
      console.error("‚ùå Generate structure error:", error);
      alert("‚ùå –û—à–∏–±–∫–∞: " + error.message);
    } finally {
      generateStructureBtn.disabled = false;
    }
  });

  // Debug button for troubleshooting
  debugBtn.addEventListener("click", async () => {
    try {
      const tab = await getCurrentTab();
      const tabUrl = tab?.url || "";
      const token = await getItmoTokenFromSettings();

      debugBtn.disabled = true;
      output.textContent = "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤...\n\n";

      // Test 1: Check token from settings
      output.textContent += `1. –¢–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${
        token ? "‚úÖ –µ—Å—Ç—å" : "‚ùå –Ω–µ—Ç"
      }\n`;
      if (token) {
        output.textContent += `   –ù–∞—á–∞–ª–æ: ${token.substring(0, 20)}...\n`;
      }

      // Test 2: Test token validation
      if (token) {
        try {
          output.textContent += `   –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${token.length} —Å–∏–º–≤–æ–ª–æ–≤\n`;
          output.textContent += `   –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏: ${
            token.split(".").length
          } —á–∞—Å—Ç–µ–π\n`;

          const validation = await BackgroundApi.validateToken(token);
          output.textContent += `2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞: ${
            validation.valid ? "‚úÖ –≤–∞–ª–∏–¥–µ–Ω" : "‚ùå –Ω–µ –≤–∞–ª–∏–¥–µ–Ω"
          }\n`;
          if (validation.error) {
            output.textContent += `   –û—à–∏–±–∫–∞: ${validation.error}\n`;
          }
          if (validation.isu) {
            output.textContent += `   ISU: ${validation.isu}\n`;
          }
        } catch (e) {
          output.textContent += `3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞: ‚ùå –æ—à–∏–±–∫–∞ ${e.message}\n`;
        }
      }

      // Test 4: Test domain detection
      output.textContent += `4. –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: ${tabUrl}\n`;
      output.textContent += `5. ITMO —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${
        isItmoProgramsPage(tabUrl) ? "‚úÖ –¥–∞" : "‚ùå –Ω–µ—Ç"
      }\n`;

      // Test 5: Try to get discipline info
      const disciplineId = getDisciplineIdFromUrl(tabUrl);
      output.textContent += `6. ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: ${
        disciplineId || "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω"
      }\n`;

      if (disciplineId && token) {
        output.textContent += "\nüåê –¢–µ—Å—Ç–∏—Ä—É—é API –≤—ã–∑–æ–≤...\n";
        try {
          await BackgroundApi.fetchDisciplineInfo(disciplineId, token, tabUrl);
          output.textContent += "7. API —Ç–µ—Å—Ç: ‚úÖ —É—Å–ø–µ—à–Ω–æ\n";
        } catch (e) {
          output.textContent += `7. API —Ç–µ—Å—Ç: ‚ùå –æ—à–∏–±–∫–∞ ${e.message}\n`;
        }
      }

      output.textContent +=
        "\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å background script –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π";
    } catch (error) {
      output.textContent = `‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`;
    } finally {
      debugBtn.disabled = false;
    }
  });

  // Settings button
  settingsBtn.addEventListener("click", () => {
    chrome.runtime.openOptionsPage();
  });

  console.log("üöÄ Modern popup script loaded successfully");
});
